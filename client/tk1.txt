import socket 
import os

HOST ='127.0.0.1'
PORT =2121

clientSocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

clientSocket.connect((HOST,PORT))
while True:
    command = input('enter your command:')
    clientSocket.sendall(command.encode())
    if command=='quit' or command=='QUIT':
        break

    Data = clientSocket.recv(1024).decode()
    if command.startswith('dwld') and Data!='Bad Request....\nWrong Command!!...':
        clientSocket2 = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        clientSocket2.connect((HOST,int(Data)))
        fileName = open(os.path.join('.',command[5:]),'wb')
        fileInfo = clientSocket2.recv(1048579)
        if not Data:
            break
        fileName.write(fileInfo)
        fileName.close()
        clientSocket2.close()
        print('file Downloaded')
    else:
        print( Data)



# import socket 
# import os
# import ssl
# import tkinter as tk


# # Read the contents of the certificate and private key files
# with open('csr.pem', 'r') as csr_file:
#     csr_content = csr_file.read()

# with open('Certificate.pem', 'r') as cert_file:
#     cert_content = cert_file.read()

# with open('Private_key.pem', 'r') as key_file:
#     key_content = key_file.read()




# def send_command():
#     command = command_entry.get()
#     client_socket.sendall(command.encode())
#     if command.lower() == 'quit':
#         root.destroy()

#     Data = client_socket.recv(1024).decode()
#     if command.startswith('dwld') and Data != 'Bad Request....\nWrong Command!!...':
#         client_socket2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#         client_socket2.connect((HOST, int(Data)))
#         filename = os.path.join('.', command[5:])
#         with open(filename, 'wb') as file:
#             while True:
#                 file_data = client_socket2.recv(1024)
#                 if not file_data:
#                     break
#                 file.write(file_data)
#         client_socket2.close()
#         status_label.config(text='File Downloaded: ' + filename)
#     else:
#         status_label.config(text=Data)

# def start_client():
#     global HOST, PORT, client_socket
#     HOST = '127.0.0.1'
#     PORT = 2121

#     client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#     client_socket.connect((HOST, PORT))

#     root = tk.Tk()
#     root.title("Client GUI")
#     root.geometry("400x300")  # Set the size of the window

#     command_label = tk.Label(root, text="Enter your command:")
#     command_label.pack()
#     global command_entry
#     command_entry = tk.Entry(root, width=50)
#     command_entry.pack()

#     send_button = tk.Button(root, text="Send", command=send_command)
#     send_button.pack()

#     global status_label
#     status_label = tk.Label(root, text="")
#     status_label.pack()

#     root.mainloop()

# start_client()
# import socket 
# import os
# import ssl
 # Read the contents of the certificate and private key files
# with open('csr.pem', 'r') as csr_file:
#     csr_content = csr_file.read()

# with open('Certificate.pem', 'r') as cert_file:
#     cert_content = cert_file.read()

# with open('Private_key.pem', 'r') as key_file:
#     key_content = key_file.read()


    
# HOST = '127.0.0.1'
# PORT =2121

# # clientSocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

# ssl_context = ssl.create_default_context()
# ssl_context.check_hostname = False
# ssl_context.verify_mode = ssl.CERT_NONE
# ssl_sock = ssl_context.wrap_socket(clientSocket)

# # ssl_sock.connect((HOST,PORT))




# HOST ='127.0.0.1'
# PORT =2121

# clientSocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

# # clientSocket.connect((HOST,PORT))
# ssl_sock.connect((HOST,PORT))

# while True:
#     command = input('enter your command:')
#     clientSocket.sendall(command.encode())
#     if command=='quit' or command=='QUIT':
#         break

#     Data = clientSocket.recv(1024).decode()
#     if command.startswith('dwld') and Data!='Bad Request....\nWrong Command!!...':
#         sslSocket2 = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
#         sslSocket2.connect((HOST,int(Data)))
#         fileName = open(os.path.join('.',command[5:]),'wb')
#         fileInfo = sslSocket2.recv(1048579)
#         if not Data:
#             break
#         fileName.write(fileInfo)
#         fileName.close()
#         sslSocket2.close()
#         print('file Downloaded')
#     else:
#         print( Data)

